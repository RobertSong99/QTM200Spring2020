library(nycflights))
```{r}
library(tidyverse)
library(nycflights13)
library(gapminder)
```
#Filter
### Combining Conditions
-& is for "AND"
-| is for "OR"
-! is for "NOT"
```{r}
fliter(flights, month==3 & day ==4)
```
#empty data frame, cannot do double "AND"
```{r}
filter(flights, month==3 & month==4)
```
```{r}
filter(flights, month==3 | month==4)
```
### A shortcut
```{r}
filter(flights, month==1 | month==2 | month==3 | month==4 | month==5)
```
-'%in%
```{r}
filter(flights, month %in% 1:5)
```
##Filter + plotting
```{r}
#line plot of evolution through time of life exp for China, India, and Brazil
gapminder
new_gap<-filter(gapminder, country %in% c("China", "Indian", "Brazil"))
new_gap
qplot(year, lifeExp, data = new_gap, geom = 'line', color = country)
```
#Missing values
```{r}
NA
```
```{r}
NA==6
```
```{r}
NA>1345
```
```{r}
mean(c(1,2,3,4))
```
```{r}
mean(c(1,2,3,4, NA))
```
```{r}
mean(c(1,2,3,4,NA), na.rm = TRUE)
```
```{r}
starwars
```
```{r}
filter(starwars, hair_color == NA)
```
```{r}
NA==NA
```
```{r}
filter(starwars, is.na(hair_color))
```
```{r}
filter(starwars, hair_color == "none" | is.na(hair_color))
```
#Mutate
```{r}
flights
```
```{r}
mutate(flights, in_flight_gain = dep_delay - arr_delay)
```
```{r}
mutate(flights, air_time_hours = air_time/60)
```
```{r}
mutate(flights, mean_dist = distance/mean(distance))
```
##Application of mutate
```{r}
# gdpPercap v. lifeExp for year 1952
new_gap <- filter(gapminder, year == 1952)
qplot(gdpPercap, lifeExp, data = new_gap)
```
```{r}
new_gap <- filter(gapminder, year == 1952 & country == "Kuwait")
qplot(gdpPercap, lifeExp, data = new_gap)
```
```{r}
new_gap <- filter(gapminder, year == 1952 & gdpPercap <90000)
qplot(gdpPercap, lifeExp, data = new_gap)
```
```{r}
new_gap <- filter(gapminder, year == 1952)
new_new_gap <- mutate(new_gap, log_gdp = log(gdpPercap))
new_new_gap
qplot(log_gdp, lifeExp, data = new_new_gap)
```
#Piping
```{r}
```
1 %>% sum(2,3,4)
sum(1,3) %>% mean (1)
new_gap <- gapminder %>%
filter(year ==1952) %>%
mutate(log_gdp = log(gdpPercap))
#Graphing
qplot(log_gdp, lifeExp, data = new_new_gap)
```
install.packages(tidyverse)
install.packages("tidyverse")
### Interpretation
1: It seems at even low population densities, the distribution of poverty levels varies quite a bit more than the more separated population densities. It’s hard to interpret correctly, as indicated in the question with the scalar quantities being difficult to read, but it could be due to more people who struggle who live in the metropolitan area, attempting to obtain jobs, or who are unemployed, ultimately leading to more poverty levels. Whereas if one lives in the rural/suburb areas, to be able to live in those areas, it takes more to sustain properly (through distance and land as examples).
"1: It seems at even low population densities, the distribution of poverty levels varies quite a bit more than the more separated population densities. It’s hard to interpret correctly, as indicated in the question with the scalar quantities being difficult to read, but it could be due to more people who struggle who live in the metropolitan area, attempting to obtain jobs, or who are unemployed, ultimately leading to more poverty levels. Whereas if one lives in the rural/suburb areas, to be able to live in those areas, it takes more to sustain properly (through distance and land as examples)."
X = matrix(
+   c(14, 7, 6, 7, 7, 1),
+   nrow=2,
+   ncol=3)
X = matrix(
+   c(14, 7, 6, 7, 7, 1),
+   nrow = 2,
+   ncol = 3)
X = matrix(
+   c(14, 7, 6, 7, 7, 1),
+   nrow = 2,
X = matrix(
+   c(14, 7, 6, 7, 7, 1),
+   row= 2,
X = matrix(
+   c(14, 7, 6, 7, 7, 1)
+   row= 2,
X = matrix(
+   c(14, 7, 6, 7, 7, 1)
+   nrow= 2,
X = matrix(
+   c(14, 7, 6, 7, 7, 1)
+   nrow = 2,
matrix(1:9, nrow =3)
X = matrix(c(14, 7, 6, 7, 7, 1), nrow = 2, ncol = 3)
X
X = matrix(c(14, 7, 6, 7, 7, 1), nrow = 2, ncol = 3) #Creating matrix from problem
X #Showing the matrix
colnames <- c("Not Stopped", "Bribe requested", "Stopped/given warning")
rownames <- c("Upper Class", "Lower Class")
X = matrix(c(14, 7, 6, 7, 7, 1), nrow = 2, ncol = 3) #Creating matrix from problem
X #Showing the matrix
colnames <- c("Not Stopped", "Bribe requested", "Stopped/given warning")
rownames <- c("Upper Class", "Lower Class")
X
X = matrix(c(14, 7, 6, 7, 7, 1), nrow = 2, ncol = 3) #Creating matrix from problem
colnames(X) <- c("Not Stopped", "Bribe requested", "Stopped/given warning")
rownames(X) <- c("Upper Class", "Lower Class")
X
sum(matrix(,1))
sum(matrix(1,))
sum(matrix(X(1,))
sum(matrix(X(1,))
sum(X[,1])
X = matrix(c(14, 7, 6, 7, 7, 1), nrow = 2, ncol = 3) #Creating matrix from problem
colnames(X) <- c("Not Stopped", "Bribe requested", "Stopped/given warning")
rownames(X) <- c("Upper Class", "Lower Class")
X #Creation of Matrix
no_stop_sum <- sum(X[,1])
bribe_sum <- sum(X[,2])
stopped_sum <- sum(X[,3])
no_stop_sum <- sum(X[,1])
no_stop_sum <- sum(X[,1])
no_stop_sum
bribe_sum <- sum(X[,2])
bribe_sum
stopped_sum <- sum(X[,3])
stopped_sum
no_stop_sum <- sum(X[,1])
no_stop_sum
bribe_sum <- sum(X[,2])
bribe_sum
stopped_sum <- sum(X[,3])
stopped_sum
lower_sum
upper_sum <- sum(X[1,])
upper_sum
lower_sum <- sum(X[2,])
lower_sum
sum(no_stop_sum, bribe_sum,stopped_sum, upper_sum, lower_sum)
no_stop_sum <- sum(X[,1])
no_stop_sum
bribe_sum <- sum(X[,2])
bribe_sum
stopped_sum <- sum(X[,3])
stopped_sum
#getting total for each column
upper_sum <- sum(X[1,])
upper_sum #27
lower_sum <- sum(X[2,])
lower_sum #15
#Getting total for each row
#now remaking matrix, to have column and row totals
new_x = matrix(c(14, 7, 21, 6, 7, 13, 7, 1, 8, 27, 15), nrow = 3, ncol = 4)
new_x
#now remaking matrix, to have column and row totals
new_x = matrix(c(14, 7, 21, 6, 7, 13, 7, 1, 8, 27, 15), nrow = 3, ncol = 4)
colnames(new_x) <- c("Not Stopped", "Bribe requested", "Stopped/given warning", "Row Total")
rownames(new_x) <- c("Upper Class", "Lower Class", "Column Total")
new_x #Creation of Matrix
#now remaking matrix, to have column and row totals
new_x = matrix(c(14, 7, 21, 6, 7, 13, 7, 1, 8, 27, 15, 84), nrow = 3, ncol = 4)
colnames(new_x) <- c("Not Stopped", "Bribe requested", "Stopped/given warning", "Row Total")
rownames(new_x) <- c("Upper Class", "Lower Class", "Column Total")
new_x #Creation of Matrix
new_x[1,1]
#to calculate expected for chi squared test = (row total/grand sum) * column total
matrix(new_x[1,3])
#to calculate expected for chi squared test = (row total/grand sum) * column total
matrix(new_x[3,1])
#to calculate expected for chi squared test = (row total/grand sum) * column total
(matrix(new_x[3,1]) / matrix(new_x[3,4])) * matrix(new_x[1,4])
(matrix(new_x[3,1]) / matrix(new_x[3,4])) * matrix(new_x[2,4])
(matrix(new_x[3,2]) / matrix(new_x[3,4])) * matrix(new_x[1,4]) #
(matrix(new_x[3,2]) / matrix(new_x[3,4])) * matrix(new_x[2,4]) #
(matrix(new_x[3,3]) / matrix(new_x[3,4])) * matrix(new_x[1,4]) #
(matrix(new_x[3,3]) / matrix(new_x[3,4])) * matrix(new_x[2,4]) #
#creating matrix of expected values
expected_values = matrix(c(6.75, 3.75, 4.18, 2.32, 2.57, 1.43), nrow = 2, ncol = 3)
expected_values
#creating matrix of expected values
expected_values = matrix(c(6.75, 3.75, 4.18, 2.32, 2.57, 1.43), nrow = 2, ncol = 3)
expected_values
matrix(X) - matrix(expected_values)
#creating matrix of expected values
expected_values = matrix(c(6.75, 3.75, 4.18, 2.32, 2.57, 1.43), nrow = 2, ncol = 3)
expected_values
X = matrix(c(14, 7, 6, 7, 7, 1), nrow = 2, ncol = 3) #Creating matrix from problem
colnames(X) <- c("Not Stopped", "Bribe requested", "Stopped/given warning")
rownames(X) <- c("Upper Class", "Lower Class")
X #Creation of Matrix
matrix(X)
X = matrix(c(14, 7, 6, 7, 7, 1), nrow = 2, ncol = 3) #Creating matrix from problem
colnames(X) <- c("Not Stopped", "Bribe requested", "Stopped/given warning")
rownames(X) <- c("Upper Class", "Lower Class")
X #Creation of Matrix
X
X - expected_values
#creating matrix of expected values
expected_values = matrix(c(6.75, 3.75, 4.18, 2.32, 2.57, 1.43), nrow = 2, ncol = 3)
expected_values
#calculating chi squared
((X - expected_values)^2) / expected_values
#calculating chi squared
sum(((X - expected_values)^2) / expected_values)
#calculating p-value with chi squared value = 28.60228, df= (2-1)(3-1), and lower tail = false, as we only want the upper end due to distribution type
pchisq(28.60228, 2, lower.tail = F)
expected_values
expected_values
#calculating standardized residuals
#want to see the matrixes again
X
expected_values
new_x
expected_values
((X[1,1] - expected_values[1,1])/ (sqrt(expected_values)*(1-(27/84))* (1-(21/84)))
((X[1,1] - expected_values[1,1])/ (sqrt(expected_values)*(1-(27/84))* (1-(21/84)))
1A = ((X[1,1] - expected_values[1,1])/ (sqrt(expected_values)*(1-(27/84))* (1-(21/84)))
A = ((X[1,1] - expected_values[1,1])/ (sqrt(expected_values)*(1-(27/84))* (1-(21/84)))
A
first_value = ((X[1,1] - expected_values[1,1])/ (sqrt(expected_values)*(1-(27/84))* (1-(21/84))))
first_value
first_value = ((X[1,1] - expected_values[1,1])/ (sqrt(expected_values[1,1])*(1-(27/84))* (1-(21/84))))
first_value
#calculating standardized residuals
#want to see the matrixes again
new_x
expected_values
A_one = ((X[1,1] - expected_values[1,1])/ (sqrt(expected_values[1,1])*(1-(27/84))* (1-(21/84))))
A_one
A_two = ((X[2,1] - expected_values[2,1])/ (sqrt(expected_values[2,1])*(1-(15/84))* (1-(21/84))))
A_two
B_one = ((X[1,2] - expected_values[1,2])/ (sqrt(expected_values[1,2])*(1-(27/84))* (1-(13/84))))
B_one
B_two = ((X[2,2] - expected_values[2,2])/ (sqrt(expected_values[2,2])*(1-(15/84))* (1-(13/84))))
B_two
C_one = ((X[1,3] - expected_values[1,3])/ (sqrt(expected_values[1,3])*(1-(27/84))* (1-(8/84))))
C_one
C_two = ((X[2,3] - expected_values[2,3])/ (sqrt(expected_values[2,3])*(1-(15/84))* (1-(8/84))))
C_two
Standardized_matrix
#creating matrix for standardized residuals
Standardized_matrix = matrix(c(5.48, 2.72, 1.55, 4.43, 4.50, -0.48), nrow=2, ncol=3)
Standardized_matrix
#creating matrix for standardized residuals
standardized_matrix = matrix(c(5.48, 2.72, 1.55, 4.43, 4.50, -0.48), nrow=2, ncol=3)
colnames(standardized_matrix) <- c("Not Stopped", "Bribe requested", "Stopped/given warning")
rownames(standardized_matrix) <- c("Upper Class", "Lower Class")
standardized_matrix #Creation of Matrix
setwd("~/GitHub/QTM200Spring2020/problem_sets/PS2/My Problem Set 2")
Economics.PS <- read.csv("~/GitHub/QTM200Spring2020/problem_sets/PS2/My Problem Set 2/Economics PS.txt")
View(Economics.PS)
setwd("~/GitHub/QTM200Spring2020/problem_sets/PS2/My Problem Set 2")
>Economics.PS <- read.csv("~/GitHub/QTM200Spring2020/problem_sets/PS2/My Problem Set 2/Economics PS.txt")
setwd("~/GitHub/QTM200Spring2020/problem_sets/PS2/My Problem Set 2")
Economics.PS <- read.csv("~/GitHub/QTM200Spring2020/problem_sets/PS2/My Problem Set 2/Economics PS.txt")
fruitfly <- read.csv("~/GitHub/QTM200Spring2020/problem_sets/PS2/fruitfly.csv")
View(fruitfly)
fruitfly <- read.csv("~/GitHub/QTM200Spring2020/problem_sets/PS2/fruitfly.csv")
summary(fruitfly)
ggplot2(aes(lifespan,), data = fruitfly) +
geom_point(aes(color = type))
library(tidyverse)
library(tidyverse)
ggplot2(aes(lifespan,), data = fruitfly) +
geom_point(aes(color = type))
install.packages('tidyverse')
install.packages("tidyverse")
library(tidyverse)
ggplot2(aes(lifespan,), data = fruitfly) +
geom_point(aes(color = type))
ggplot(aes(lifespan,), data = fruitfly) +
geom_point(aes(color = type))
ggplot(aes(lifespan, :count""), data = fruitfly) +
ggplot(aes(lifespan, "count), data = fruitfly) +
library(tidyverse)
ggplot(aes(lifespan, "count"), data = fruitfly) +
ggplot(aes(lifespan, count), data = fruitfly) +
geom_point(aes(color = type))
library(tidyverse)
ggplot(aes(lifespan, type), data = fruitfly) +
geom_bar(aes(color = type))
ggplot(aes(lifespan, type), data = fruitfly) +
geom_point(aes(color = type))
boxplot(type,data=fruitfly, main="Test",
xlab="type", ylab="lifespan"
library(tidyverse)
boxplot(type,data=fruitfly, main="Test",
xlab="type", ylab="lifespan"
boxplot(type,data=fruitfly, main="Test",
xlab="type", ylab="lifespan")
boxplot(lifespan,data=fruitfly, main="Test",
xlab="type", ylab="lifespan")
boxplot('type' ,data=fruitfly, main="Test",
xlab="type", ylab="lifespan")
library(tidyverse)
ggplot(aes(lifespan, type), data = fruitfly) +
geom_point(aes(color = type))
boxplot(lifespan$type)
boxplot(lifespan$type, data = fruitfly)
ggplot(aes(lifespan, type), data = fruitfly) +
geom_bar(aes(color = type))
ggplot(aes(lifespan, type), data = fruitfly) +
geom_dotplot(aes(color = type))
ggplot(aes(lifespan,), data = fruitfly) +
geom_dotplot(aes(color = type))
library(tidyverse)
ggplot(aes(lifespan,), data = fruitfly) +
geom_dotplot(aes(color = type, alpha = .5))
library(tidyverse)
ggplot(aes(lifespan,), data = fruitfly) +
geom_dotplot(aes(fill = type, alpha = 1))
library(tidyverse)
ggplot(aes(lifespan,), data = fruitfly) +
geom_dotplot()
ggplot(aes(lifespan,), data = fruitfly) +
geom_boxplot()
library(tidyverse)
ggplot(aes(lifespan,), data = fruitfly) +
geom_bar()
ggplot(aes(lifespan,), data = fruitfly) +
geom_point(aes(color = type))
ggplot(aes(lifespan,type), data = fruitfly) +
geom_point(aes(color = type))
ggplot(lifespan, thorax), data = fruitfy) +
ggplot(lifespan, thorax, data = fruitfy) +
geom_point(aes(color = type))
ggplot(lifespan, thorax, data = fruitfly) +
geom_point(aes(color = type))
ggplot(aes(lifespan, thorax), data = fruitfly) +
geom_point(aes(color = type))
ggplot(aes(lifespan, thorax), data = fruitfly) +
geom_point(aes(color = type))+
geom_line()
ggplot(aes(lifespan, thorax), data = fruitfly) +
geom_point(aes(color = type))+
geom_smooth()
ggplot(aes(lifespan, thorax), data = fruitfly) +
geom_point(aes(color = type))+
abline()
ggplot(aes(lifespan, thorax), data = fruitfly) +
geom_point(aes(color = type))+
geom_smooth(method = 'lm')
c(round(mean(lifespan), 2), round(sd(lifespan),2))
c(round(mean('lifespan'), 2), round(sd('lifespan'),2))
fruitfly
c(round(mean(lifespan), 2), round(sd(lifespan),2))
boxplot(lifespan, data = fruitfly)
boxplot(fruitfly$lifespan)
chisq.test(X)
chisq.test(new_x)
sum(upper_sum, lower_sum) #Matrix total is 42
#now remaking matrix, to have column and row totals for observed values
new_x = matrix(c(14, 7, 21, 6, 7, 13, 7, 1, 8, 27, 15, 42), nrow = 3, ncol = 4)
colnames(new_x) <- c("Not Stopped", "Bribe requested", "Stopped/given warning", "Column Total")
rownames(new_x) <- c("Upper Class", "Lower Class", "Row Total")
new_x #Creation of Matrix
#to calculate expected values for chi squared test = (row total/grand sum) * column total
(matrix(new_x[3,1]) / matrix(new_x[3,4])) * matrix(new_x[1,4]) #6.75
(matrix(new_x[3,1]) / matrix(new_x[3,4])) * matrix(new_x[2,4]) #3.75
(matrix(new_x[3,2]) / matrix(new_x[3,4])) * matrix(new_x[1,4]) #4.18
(matrix(new_x[3,2]) / matrix(new_x[3,4])) * matrix(new_x[2,4]) #2.32
(matrix(new_x[3,3]) / matrix(new_x[3,4])) * matrix(new_x[1,4]) #2.57
(matrix(new_x[3,3]) / matrix(new_x[3,4])) * matrix(new_x[2,4]) #1.43
#creating matrix of expected values
expected_values = matrix(c(13.5, 7.5, 8.36, 4.64, 5.14, 2.86), nrow = 2, ncol = 3)
expected_values
#calculating chi squared directly
sum(((X - expected_values)^2) / expected_values) #Chi squared values is 28.60228
#calculating p-value with chi squared value = 3.801141, df= (2-1)(3-1), and lower tail = false, as we only want the upper end due to distribution type
pchisq(3.801141, 2, lower.tail = F)
#p-value = 6.15e-07
chisq.test(X)
X = matrix(c(14, 7, 6, 7, 7, 1), nrow = 2, ncol = 3) #Creating matrix from problem
colnames(X) <- c("Not Stopped", "Bribe requested", "Stopped/given warning")
rownames(X) <- c("Upper Class", "Lower Class")
X #Creation of Matrix
#calculating standardized residuals
#want to see the matrixes again
new_x
expected_values
#calculating standardized residuals
#want to see the matrixes again
new_x
expected_values
A_one = ((X[1,1] - expected_values[1,1])/ (sqrt(expected_values[1,1])*(1-(27/42))* (1-(21/42))))
A_one
A_two = ((X[2,1] - expected_values[2,1])/ (sqrt(expected_values[2,1])*(1-(15/42))* (1-(21/42))))
A_two
B_one = ((X[1,2] - expected_values[1,2])/ (sqrt(expected_values[1,2])*(1-(27/42))* (1-(13/42))))
B_one
B_two = ((X[2,2] - expected_values[2,2])/ (sqrt(expected_values[2,2])*(1-(15/42))* (1-(13/42))))
B_two
C_one = ((X[1,3] - expected_values[1,3])/ (sqrt(expected_values[1,3])*(1-(27/42))* (1-(8/42))))
C_one
C_two = ((X[2,3] - expected_values[2,3])/ (sqrt(expected_values[2,3])*(1-(15/42))* (1-(8/42)))
C_two
A_one = ((X[1,1] - expected_values[1,1])/ (sqrt(expected_values[1,1])*(1-(27/42))* (1-(21/42))))
A_one
A_two = ((X[2,1] - expected_values[2,1])/ (sqrt(expected_values[2,1])*(1-(15/42))* (1-(21/42))))
A_two
B_one = ((X[1,2] - expected_values[1,2])/ (sqrt(expected_values[1,2])*(1-(27/42))* (1-(13/42))))
B_one
B_two = ((X[2,2] - expected_values[2,2])/ (sqrt(expected_values[2,2])*(1-(15/42))* (1-(13/42))))
B_two
C_one = ((X[1,3] - expected_values[1,3])/ (sqrt(expected_values[1,3])*(1-(27/42))* (1-(8/42))))
C_one
C_two = ((X[2,3] - expected_values[2,3])/ (sqrt(expected_values[2,3])*(1-(15/42))* (1-(8/42))))
C_two
#creating matrix for standardized residuals
standardized_matrix = matrix(c(0.762, -0.568, -3.310, 2.468, 2.838, -2.113), nrow=2, ncol=3)
colnames(standardized_matrix) <- c("Not Stopped", "Bribe requested", "Stopped/given warning")
rownames(standardized_matrix) <- c("Upper Class", "Lower Class")
standardized_matrix #Creation of Matrix
life <- fruitfly$lifespan
boxplot(life$type)
boxplot(life, type)
boxplot(life, fruitfly$type)
boxplot(fruitfly$lifespan)
life <- fruitfly$type
boxplot(type, fruitfly$lifespan)
boxplot(fruitfly$type, fruitfly$lifespan)
boxplot(fruitfly$type1, fruitfly$lifespan)
boxplot(fruitfly$type)
fruitfly$type
type_1 <- fruitfly$type = 1
fruitfly$type
fruitfly$type(1)
fruitfly$type = 1
fruitfly$type
boxplot(fruitfly$type)
fruitfly$type
life <- fruitfly$type
boxplot(fruitfly$type1, fruitfly$lifespan)
boxplot(fruitfly$type)
boxplot(fruitfly$lifespan)
life <- fruitfly$type
boxplot(fruitfly$type1, fruitfly$lifespan)
library(tidyverse)
ggplot(aes(lifespan,), data = fruitfly) +
geom_bar()
ggplot(aes(lifespan,type), data = fruitfly) +
geom_point(aes(color = type))
fruitfly <- read.csv("~/GitHub/QTM200Spring2020/problem_sets/PS2/fruitfly.csv")
summary(fruitfly)
library(tidyverse)
ggplot(aes(lifespan,), data = fruitfly) +
geom_bar()
ggplot(aes(lifespan,type), data = fruitfly) +
geom_point(aes(color = type))
boxplot(fruitfly$lifespan)
life <- fruitfly$type
boxplot(fruitfly$type1, fruitfly$lifespan)
boxplot(fruitfly$lifespan)
life <- fruitfly$type
boxplot(fruitfly$type, fruitfly$lifespan)
fruitfly
c(round(mean(lifespan), 2), round(sd(lifespan),2))
fruitfly
c(round(mean(fruitfly$lifespan), 2), round(sd(fruitfly$lifespan),2))
standardized_fly <- (((fruitfly$lifespan - (mean(fruitfly$lifespan)))/sd(fruitfly$lifespan)))
round(standardized_fly, 2)
