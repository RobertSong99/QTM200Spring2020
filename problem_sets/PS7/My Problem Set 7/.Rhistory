```
```{r}
#?<NAME OF FUNCTION
?qplot
```
##1.5 Counfounding factors and facets
```{r}
qplot(gdpPercap, lifeExp, data = gapminder)
```
```{r}
qplot(pop, lifeExp, data = gapminder)
```
```{r}
qplot(gdpPercap, lifeExp, data = gapminder, facets = ~year)
```
```{r}
qplot(gdpPercap, lifeExp,
data = gapminder,
geom = c('point', 'smooth'),
facets = ~year)
```
```{r}
qplot(pop, lifeExp, data = gapminder, facets = ~year)
```
```{r}
qplot(gdpPercap, lifeExp, data = gapminder, geom = c('point', 'smooth'),facets = ~year)
```
#2. Data manipulation with dplyr
#Setup
```{r eval = FALSE}
install.packages("nycflights13")
```
```{r}
library("nycflights13")
flights
```
## 2.1 Filter
```{r}
filter(flights, month ==3)
```
```{r}
View(filter(flights, month == 3))
```
```{r}
#Second half of the month
filter(flights, day >= 15)
```
###Combining comparisons
- '&' is for "AND"
- '|' is for "OR"
- "!' is for "NOT"
```{r}
filter(flights, month == 3 & day == 4)
```
```{r}
filter(flights, ! month == 1)
filter(flights, month != 1)
```
```{r}
filter(starwars, is.na(hair-color))
```
```{r}
filter(starwars, is.na(hair_color))
```
```{r}
filter(starwars, hair_color == "black")
```
```{r}
filter(starwars, hair_color == "none" | is.na(hair_color))
```
```{r}
filter(starwars, hair_color == "none" | is.na(hair_color))
```
```{r}
flights
```
flights
mutate(flights, in_flight_gain = dep_delay - arr_delay)
mutate(flights, in_flight_gain = dep_delay - arr_delay)
install.packages(tidyverse)
install.packages("tidyverse")
mutate(flights, air_time_hours = air_time/60)
mutate(flights, air_time_hours = air_time/60)
mutate(flights, mean_dist = distance/mean(distance))
new_gap <- filter(gapminder, year == 1952)
qplot(gdpPercap, lifeExp, data = new_gap)
```{r}
library(tidyverse)
library(nycflights)
library(gapminder)
new_new_gap <- mutate(new_gap, log_gdp = log(gdpPercap))
new_new_gap
qplot(log_gdp, lifeExp, data = new_new_gap)
new_gap <- filter(gapminder, year == 1952)
new_new_gap <- mutate(new_gap, log_gdp = log(gdpPercap))
new_new_gap
qplot(log_gdp, lifeExp, data = new_new_gap)
# gdpPercap v. lifeExp for year 1952
new_gap <- filter(gapminder, year == 1952)
qplot(gdpPercap, lifeExp, data = new_gap)
```
```{r}
new_gap <- filter(gapminder, year == 1952 & country == "Kuwait")
qplot(gdpPercap, lifeExp, data = new_gap)
```
```{r}
new_gap <- filter(gapminder, year == 1952 & gdpPercap <90000)
qplot(gdpPercap, lifeExp, data = new_gap)
```
```{r}
new_gap <- filter(gapminder, year == 1952)
new_new_gap <- mutate(new_gap, log_gdp = log(gdpPercap))
new_new_gap
qplot(log_gdp, lifeExp, data = new_new_gap)
```
---
title: "9-27-19 Notes"
author: "Robert Song"
date: "9/27/2019"
output: html_document
---library(tidyverse
library(nycflights))
```{r}
library(tidyverse)
library(nycflights13)
library(gapminder)
```
#Filter
### Combining Conditions
-& is for "AND"
-| is for "OR"
-! is for "NOT"
```{r}
fliter(flights, month==3 & day ==4)
```
#empty data frame, cannot do double "AND"
```{r}
filter(flights, month==3 & month==4)
```
```{r}
filter(flights, month==3 | month==4)
```
### A shortcut
```{r}
filter(flights, month==1 | month==2 | month==3 | month==4 | month==5)
```
-'%in%
```{r}
filter(flights, month %in% 1:5)
```
##Filter + plotting
```{r}
#line plot of evolution through time of life exp for China, India, and Brazil
gapminder
new_gap<-filter(gapminder, country %in% c("China", "Indian", "Brazil"))
new_gap
qplot(year, lifeExp, data = new_gap, geom = 'line', color = country)
```
#Missing values
```{r}
NA
```
```{r}
NA==6
```
```{r}
NA>1345
```
```{r}
mean(c(1,2,3,4))
```
```{r}
mean(c(1,2,3,4, NA))
```
```{r}
mean(c(1,2,3,4,NA), na.rm = TRUE)
```
```{r}
starwars
```
```{r}
filter(starwars, hair_color == NA)
```
```{r}
NA==NA
```
```{r}
filter(starwars, is.na(hair_color))
```
```{r}
filter(starwars, hair_color == "none" | is.na(hair_color))
```
#Mutate
```{r}
flights
```
```{r}
mutate(flights, in_flight_gain = dep_delay - arr_delay)
```
```{r}
mutate(flights, air_time_hours = air_time/60)
```
```{r}
mutate(flights, mean_dist = distance/mean(distance))
```
##Application of mutate
```{r}
# gdpPercap v. lifeExp for year 1952
new_gap <- filter(gapminder, year == 1952)
qplot(gdpPercap, lifeExp, data = new_gap)
```
```{r}
new_gap <- filter(gapminder, year == 1952 & country == "Kuwait")
qplot(gdpPercap, lifeExp, data = new_gap)
```
```{r}
new_gap <- filter(gapminder, year == 1952 & gdpPercap <90000)
qplot(gdpPercap, lifeExp, data = new_gap)
```
```{r}
new_gap <- filter(gapminder, year == 1952)
new_new_gap <- mutate(new_gap, log_gdp = log(gdpPercap))
new_new_gap
qplot(log_gdp, lifeExp, data = new_new_gap)
```
#Piping
```{r}
```
1 %>% sum(2,3,4)
sum(1,3) %>% mean (1)
new_gap <- gapminder %>%
filter(year ==1952) %>%
mutate(log_gdp = log(gdpPercap))
#Graphing
qplot(log_gdp, lifeExp, data = new_new_gap)
```
install.packages(tidyverse)
install.packages("tidyverse")
### Interpretation
1: It seems at even low population densities, the distribution of poverty levels varies quite a bit more than the more separated population densities. It’s hard to interpret correctly, as indicated in the question with the scalar quantities being difficult to read, but it could be due to more people who struggle who live in the metropolitan area, attempting to obtain jobs, or who are unemployed, ultimately leading to more poverty levels. Whereas if one lives in the rural/suburb areas, to be able to live in those areas, it takes more to sustain properly (through distance and land as examples).
"1: It seems at even low population densities, the distribution of poverty levels varies quite a bit more than the more separated population densities. It’s hard to interpret correctly, as indicated in the question with the scalar quantities being difficult to read, but it could be due to more people who struggle who live in the metropolitan area, attempting to obtain jobs, or who are unemployed, ultimately leading to more poverty levels. Whereas if one lives in the rural/suburb areas, to be able to live in those areas, it takes more to sustain properly (through distance and land as examples)."
plot(hatvalues(model1), rstudent(model1), type = "n")
cook <- sqrt(cooks.distance(model1))
points(hatvalues(model1), rstudent(model1),
cex=10*cook/max(cook))
abline(h=c(-2,0,2), lty = 2)
abline(v=c(2,3) * 3/45, lty = 2)
identify(hatvalues(model1), rstudent(model1), row.names(gamble))
setwd("~/GitHub/QTM200Spring2020/problem_sets/PS6/My Problem Set 6")
setwd("~/GitHub/QTM200Spring2020/problem_sets/PS6/My Problem Set 6")
cholesterol <- read.csv("~/GitHub/QTM200Spring2020/problem_sets/PS6/cholesterol.csv")
View(cholesterol)
cholesterol
cholesterol
library(ggplot)
library(ggplot2)
###Question 1###
#Part A#
explainatory <- cholesterol(sex + fat)
###Question 1###
#Part A#
explainatory <- data(cholesterol(sex + fat)
explainatory
###Question 1###
#Part A#
explainatory <- data(cholesterol(sex + fat))
###Question 1###
#Part A#
explain <- lm(sex + fat, data = cholesterol)
###Question 1###
#Part A#
explain <- lm(sex ~ fat, data = cholesterol)
plot(explain)
ggplot(data=cholesterol, aes(cholCat, explain))
ggplot(data=cholesterol, aes(explain, cholCat))
ggplot(data=cholesterol, aes(sex, fat),
geom_point(f))
ggplot(data=cholesterol, aes(sex, fat),
geom_point())
ggplot(data=cholesterol, aes(sex, fat),
geom_point())
ggplot(data=cholesterol, aes(sex, fat))
plot(data=cholesterol, aes(sex, fat))
plot(sex,fat)
plot(sex,fat, data=cholesterol)
, data=cholesterol
plot(sex, fat, data=cholesterol)
plot(data= cholesterol, sex, fat
plot(data= cholesterol, sex, fat)
ggplot(data=cholesterol, aes(explain, cholCat),
geom_bar())
ggplot(data=cholesterol, aes(sex, fat),
geom_bar())
ggplot(data=cholesterol, aes(sex, fat),
geom_bar(aes(sex,fat)))
ggplot(data=cholesterol, aes(sex, fat),
geom_smooth(aes(sex,fat)))
ggplot(data=cholesterol, aes(sex, fat),
geom_smooth(stat("identify")))
explain <- ggplot(data=cholesterol, aes(sex, fat))
explain + geom_point()
fit <- glm(sex+fat ~ cholCat, data = cholesterol, family=binomial())
fit <- glm(cholCat ~ sex+fat, data = cholesterol, family=binomial())
fit
summary(fit)
plot(fit)
ggplot(data=cholesterol, aes(cholCat, sex))
ggplot(data=cholesterol, aes(cholCat, sex)) +
geom_point()
ggplot(data=cholesterol, aes(cholCat, sex)) +
geom_bar()
ggplot(data=cholesterol, aes(cholCat, sex)) +
geom_count()
table(cholesterol$sex, cholesterol$cholCat)
ftable(cholesterol$sex, cholesterol$cholCat)
(fit)
plot(fit)
ggplot(fit)
ggplot(fit) + geom_point()
plot(cholesterol$sex+fat, cholesterol$cholCat)
plot(glm(cholCat ~ sex+fat, data=cholesterol))
plot(glm(cholCat ~ sex+fat, data=cholesterol))
fit <- glm(cholCat ~ sex+fat, data = cholesterol, family=binomial())
plot(fit)
fit <- glm(cholCat ~ sex+fat, data = cholesterol, family=gaussian())
plot(fit)
summary(fit) #has a p-value of 2e-16
###Question 2###
#Part c#
-.1303597 + (.1894160*0) + (0.0082466*100)
plot(fit) + geom_point()
View(gdpChange)
setwd("~/GitHub/QTM200Spring2020/problem_sets/PS6/My Problem Set 6")
gdpChange <- read.csv("~/GitHub/QTM200Spring2020/problem_sets/PS6/gdpChange.csv")
View(gdpChange)
###Question 2 Part 2###
mydata = gdpChange
###Question 2 Part 2###
data = gdpChange
data$GDPWdiff2 = relevel(data$GDPWdiff, red = "no change")
data$GDPWdiff2 = relevel(data$GDPWdiff, ref = "no change")
###Question 2 Part 2###
mydata = gdpChange
mydata$GDPWdiff2 = relevel(mydata$GDPWdiff, ref = "no change")
multil = multinom(GDPWdiff2 ~ REG + OIL, data=mydata)
###Question 2 Part 2###
package(nnet)
install.packages(nnet)
install.packages(mnet)
###Question 2 Part 2###
library(nnet)
mydata = gdpChange
mydata$GDPWdiff2 = relevel(mydata$GDPWdiff, ref = "no change")
multil = multinom(GDPWdiff2 ~ REG + OIL, data=mydata)
summary(multil)
plot(multil)
mydata$GDPWdiff2 = relevel(mydata$GDPWdiff, ref = "no change")
multil = multinom(GDPWdiff2 ~ REG + OIL, data=mydata)
summary(multil)
mydata$GDPWdiff2 = relevel(mydata$GDPWdiff, ref = "negative")
multil = multinom(GDPWdiff2 ~ REG + OIL, data=mydata)
summary(multil)
mydata$GDPWdiff2 = relevel(mydata$GDPWdiff, ref = "no change")
multil = multinom(GDPWdiff2 ~ REG + OIL, data=mydata)
summary(multil)
###Part 2 Question 2###
multiorder = multinorm(GDPwdiff ~ REG + OIL, data=mydata)
###Part 2 Question 2###
multiorder = multinom(GDPwdiff ~ REG + OIL, data=mydata)
###Part 2 Question 2###
multiorder = multinom(GDPWdiff ~ REG + OIL, data=mydata)
summary(multiorder)
###Part 2 Question 2###
ordinal = polr(GDPWdiff ~ REG + OIL, data=mydata))
###Part 2 Question 2###
ordinal = polr(GDPWdiff ~ REG + OIL, data=mydata)
###Part 2 Question 2###
library(MASS)
ordinal = polr(GDPWdiff ~ REG + OIL, data=mydata)
summary(ordinal)
library(nnet)
mydata = gdpChange
mydata$GDPWdiff2 = relevel(mydata$GDPWdiff, ref = "no change")
multil = multinom(G
mydata = gdpChange
mydata$GDPWdiff2 = relevel(mydata$GDPWdiff, ref = "no change")
multil = multinom(GDPWdiff2 ~ REG + OIL, data=mydata)
summary(multil)
ordinal = polr(GDPWdiff ~ REG + OIL, data=mydata)
summary(ordinal)
coef(summary(ordinal))
coef(summary(multil))
###Part 2 Question 2###
library(MASS)
ordinal = polr(GDPWdiff ~ REG + OIL, data=mydata)
summary(ordinal)
coef(summary(ordinal))
setwd("~/GitHub/QTM200Spring2020/problem_sets/PS7/My Problem Set 7")
MexicoMuniData <- read.csv("~/GitHub/QTM200Spring2020/problem_sets/PS7/MexicoMuniData.csv")
View(MexicoMuniData)
setwd("~/GitHub/QTM200Spring2020/problem_sets/PS7/My Problem Set 7")
###Part 1 Question 1###
PANdata = MexicoMuniData
summary(PANdata)
PANdata$competitive.district
View(PANdata)
install.packages(lmer)
###Part 2 Question 1###
library(lmer)
install.packages("lmerTest")
summary(lmer)
###Part 2 Question 1###
str(sleepstudy)
library(lme4)
str(sleepstudy)
model1 <- lm(Reaction ~ Days, data = sleepstudy)
summary(model1)
plot(model1)
ggplot(data = sleepstudy, aes(Days, Reaction))
ggplot(data = sleepstudy, aes(Days, Reaction))+
geom_point()
ggplot(data = sleepstudy, aes(Days, Reaction))+
geom_point() +
geom_smooth()
ggplot(data = sleepstudy, aes(Days, Reaction))+
geom_point() +
geom_line()
ggplot(data = sleepstudy, aes(Days, Reaction))+
geom_point() +
geom_smooth()
plot(model1)
summary(model1)
ggplot(data = sleepstudy, aes(Days, Reaction))+
geom_point() +
geom_smooth(method = "lm")
###Part 2 Question 2###
view(sleepstudy)
str(sleepstudy)
###Part 2 Question 2###
table(sleepstudy)
str(sleepstudy)
###Part 2 Question 2###
model2 <- lm(Subject, data = sleepstudy)
###Part 2 Question 2###
model2 <- lm(Subject ~ Days, data = sleepstudy)
ggplot(data = sleepstudy, aes(Subject, Reaction))+
geom_point() +
geom_smooth(method = "lm")
ggplot(data = sleepstudy, aes(Days, Reaction))+
geom_point() +
geom_smooth(method = "lm")
###Part 2 Question 2###
model2 <- lm(Days:Subject, data = sleepstudy)
str(sleepstudy)
model1 <- lm(Reaction ~ Days, data = sleepstudy)
summary(model1)
###Part 2 Question 2###
model2 <- lm(Days:Subject, data = sleepstudy)
###Part 2 Question 1###
library(lme4)
###Part 2 Question 2###
model2 <- lm(Days:Subject, data = sleepstudy)
###Part 2 Question 2###
model2 <- lm(Days ~ Reaction, data = sleepstudy)
summary(model2)
###Part 2 Question 2###
model2 <- lm(Reaction, data = sleepstudy)
###Part 2 Question 2###
model2 <- lm(Reaction ~ Days | Subject, data = sleepstudy)
model2coef <- coef(model2)
names(model2coef) <- c("Intercept", "Days.Slope")
table(model2coef)
summary(model2coef)
summary(model2)
table(model2)
###Part 2 Question 2###
model2 <- lmList(Reaction ~ Days | Subject, data = sleepstudy)
model2coef <- coef(model2)
names(model2coef) <- c("Intercept", "Days.Slope")
summary(model2coef)
ggplot(data = model2coef, aes("Intercept", "Days.Slope"))
ggplot(data = model2coef, aes(Intercept, Days.Slope))+
geom_point()+
geom_smooth()
###Part 2 Questoin 3###
model3 <- lmList(Reaction ~ Days:Subject, data = sleepstudy)
###Part 2 Question 3###
model3 <- lmList(Reaction ~ Days | Days:Subject, data = sleepstudy)
model3coef <- coef(model3)
###Part 2 Question 3###
model3 <- lmList(Days.Slope ~ Intercept, data = model2coef)
model3coef <- coef(model3)
ggplot(data=model3coef, aes(Intercept, Days.Slope))+
geom_point()+
geom_smooth()
ggplot(data=model3coef, aes("Intercept"", Days.Slope))+
ggplot(data=model3coef, aes("Intercept", Days.Slope))+
geom_point()+
geom_smooth()
###Part 2 Question 4###
model1_mix = lmer(Reaciton ~ Days + (Days | Subject), data = sleepstudy)
summary(model1_mix)
###Part 2 Question 4###
model1_mix = lmer(Reaciton ~ Days + (Days | Subject), data = sleepstudy)
###Part 2 Question 4###
model1_mix = lmer(Reaction ~ Days + (Days | Subject), data = sleepstudy)
summary(model1_mix)
###Part 2 Question 4###
model1_mix = lmer(Reaction ~ Days + (Days | Subject), data = model3coef)
###Part 2 Question 4###
model1_mix = lmer(Reaction ~ Days + (Days | Subject), data = sleepstudy)
summary(model1_mix)
